{
  "version": 3,
  "sources": ["../lib/regularised_gamma_prefix.js", "../lib/gamma_p_derivative.js", "../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lanczosSumExpGScaled = require( '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled' );\nvar gammaln = require( '@stdlib/math-base-special-gammaln' );\nvar gamma = require( '@stdlib/math-base-special-gamma' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar max = require( '@stdlib/math-base-special-max' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar MAX_LN = require( '@stdlib/constants-float64-max-ln' );\nvar MIN_LN = require( '@stdlib/constants-float64-min-ln' );\nvar G = require( '@stdlib/constants-float64-gamma-lanczos-g' );\nvar E = require( '@stdlib/constants-float64-e' );\n\n\n// MAIN //\n\n/**\n* Computes `(z^a)*(e^-z) / gamma(a)`.\n*\n* @private\n* @param {number} a - input value\n* @param {number} z - input value\n* @returns {number} function value\n*/\nfunction regularisedGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar amza;\n\tvar agh;\n\tvar alz;\n\tvar amz;\n\tvar sq;\n\tvar d;\n\n\tagh = a + G - 0.5;\n\td = ( (z - a) - G + 0.5 ) / agh;\n\tif ( a < 1.0 ) {\n\t\t// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:\n\t\tif ( z <= MIN_LN ) {\n\t\t\t// Use logs, so should be free of cancellation errors:\n\t\t\treturn exp( ( a * ln(z) ) - z - gammaln( a ) );\n\t\t}\n\t\t// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:\n\t\treturn pow( z, a ) * exp( -z ) / gamma( a );\n\t}\n\tif ( abs(d*d*a) <= 100.0 && a > 150.0 ) {\n\t\t// Special case for large a and a ~ z:\n\t\tprefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );\n\t\tprefix = exp( prefix );\n\t}\n\telse {\n\t\t// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:\n\t\talz = a * ln(z / agh);\n\t\tamz = a - z;\n\t\tif (\n\t\t\tmin(alz, amz) <= MIN_LN ||\n\t\t\tmax(alz, amz) >= MAX_LN\n\t\t) {\n\t\t\tamza = amz / a;\n\t\t\tif (\n\t\t\t\tmin(alz, amz)/2.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/2.0 < MAX_LN\n\t\t\t) {\n\t\t\t\t// Compute square root of the result and then square it:\n\t\t\t\tsq = pow( z / agh, a / 2.0 ) * exp( amz / 2.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tmin(alz, amz)/4.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/4.0 < MAX_LN &&\n\t\t\t\tz > a\n\t\t\t) {\n\t\t\t\t// Compute the 4th root of the result then square it twice:\n\t\t\t\tsq = pow( z / agh, a / 4.0 ) * exp( amz / 4.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t\tprefix *= prefix;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tamza > MIN_LN &&\n\t\t\t\tamza < MAX_LN\n\t\t\t) {\n\t\t\t\tprefix = pow( (z * exp(amza)) / agh, a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprefix = exp( alz + amz );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprefix = pow( z / agh, a ) * exp( amz );\n\t\t}\n\t}\n\tprefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nmodule.exports = regularisedGammaPrefix;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_58_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gammaln = require( '@stdlib/math-base-special-gammaln' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar FLOAT64_MAX = require( '@stdlib/constants-float64-max' );\nvar regularisedGammaPrefix = require( './regularised_gamma_prefix.js' );\n\n\n// MAIN //\n\n/**\n* Calculates the partial derivative with respect to x of the incomplete gamma function.\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {NonNegativeNumber} x - function parameter\n* @returns {number} function value\n*/\nfunction gammaPDerivative( a, x ) {\n\tvar f1;\n\tif ( a <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( a > 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ( a === 1.0 ) ? 1.0 : PINF;\n\t}\n\tf1 = regularisedGammaPrefix( a, x );\n\tif ( x < 1.0 && ( FLOAT64_MAX * x < f1 ) ) {\n\t\treturn PINF;\n\t}\n\tif ( f1 === 0.0 ) {\n\t\t// Underflow in calculation, use logs instead:\n\t\tf1 = (a * ln( x )) - x - gammaln( a ) - ln( x );\n\t\tf1 = exp( f1 );\n\t} else {\n\t\tf1 /= x;\n\t}\n\treturn f1;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gammaPDerivative;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar gammaDeriv = require( './gamma_p_derivative.js' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 0.5, 1.0 );\n* // returns ~0.054\n*\n* @example\n* var y = pdf( 0.1, 1.0, 1.0 );\n* // returns ~0.905\n*\n* @example\n* var y = pdf( -1.0, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 0.6, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative shape parameter:\n* var y = pdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* // Negative rate parameter:\n* var y = pdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 || x === PINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( alpha === 0.0 ) {\n\t\t// Point mass at 0...\n\t\treturn ( x === 0.0 ) ? PINF : 0.0;\n\t}\n\treturn gammaDeriv( alpha, x * beta ) * beta;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pdf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar degenerate = require( '@stdlib/stats-base-dists-degenerate-pdf' ).factory;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar gammaDeriv = require( './gamma_p_derivative.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.\n*\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 3.0, 1.5 );\n*\n* var y = pdf( 1.0 );\n* // returns ~0.377\n*\n* y = pdf( 4.0 );\n* // returns ~0.067\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( -1.2 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x === PINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn gammaDeriv( alpha, x * beta ) * beta;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-gamma-pdf\n*\n* @example\n* var pdf = require( '@stdlib/stats-base-dists-gamma-pdf' );\n*\n* var y = pdf( 2.0, 0.5, 1.0 );\n* // returns ~0.054\n*\n* var myPDF = pdf.factory( 6.0, 7.0 );\n* y = myPDF( 2.0 );\n* // returns ~0.026\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_regularised_gamma_prefix", "__commonJSMin", "exports", "module", "lanczosSumExpGScaled", "gammaln", "gamma", "log1p", "sqrt", "abs", "exp", "pow", "max", "min", "ln", "MAX_LN", "MIN_LN", "G", "E", "regularisedGammaPrefix", "a", "z", "prefix", "amza", "agh", "alz", "amz", "sq", "d", "require_gamma_p_derivative", "__commonJSMin", "exports", "module", "gammaln", "exp", "ln", "PINF", "FLOAT64_MAX", "regularisedGammaPrefix", "gammaPDerivative", "a", "x", "f1", "require_main", "__commonJSMin", "exports", "module", "isnan", "PINF", "gammaDeriv", "pdf", "x", "alpha", "beta", "require_factory", "__commonJSMin", "exports", "module", "constantFunction", "degenerate", "isnan", "PINF", "gammaDeriv", "factory", "alpha", "beta", "pdf", "x", "setReadOnly", "main", "factory"]
}
